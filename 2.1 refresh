# 🔁 `refresh()` 메서드의 전체 라이프사이클 분석과 ApplicationContext의 확장성

Spring Framework의 핵심 구성 메서드 중 하나인 `AbstractApplicationContext#refresh()`는 **애플리케이션 컨텍스트를 초기화하고 재시작하는 전반적인 생명 주기 관리 메서드**입니다. Spring Boot의 자동 구성도 이 메서드 내에서 모두 이루어지며, 거의 모든 Spring 기반 애플리케이션은 이 과정을 통해 설정됩니다.

## ✅ 1. `refresh()` 전체 호출 흐름 순서도

`AbstractApplicationContext#refresh()`는 대략 다음과 같은 순서로 실행됩니다:

```
refresh()
├── prepareRefresh()
├── obtainFreshBeanFactory()
├── prepareBeanFactory()
├── postProcessBeanFactory()
├── invokeBeanFactoryPostProcessors()
├── registerBeanPostProcessors()
├── initMessageSource()
├── initApplicationEventMulticaster()
├── onRefresh()
├── registerListeners()
├── finishBeanFactoryInitialization()
└── finishRefresh()
```

각 단계를 아래에서 상세히 분석합니다.

---

## 🔍 2. 단계별 분석

### 🧱 2.1 `prepareRefresh()`

* 컨텍스트 상태 초기화
* `startupDate`, `closed`, `active` 플래그 초기화
* `Environment`에 대한 property source 재로딩
* ApplicationContext 초기화 시작을 선언

### 🧰 2.2 `obtainFreshBeanFactory()`

* `refreshBeanFactory()` 호출
* 기존의 `BeanFactory`가 있으면 닫고 새로 생성
* XML이나 Annotation 기반의 설정 클래스들을 기반으로 빈 정의 읽음

### 🔧 2.3 `prepareBeanFactory(ConfigurableListableBeanFactory)`

* 내부적으로 다음을 등록함:

  * 클래스 로더
  * 표현식 언어 처리기 (`SpEL`)
  * 환경 변수
  * `ApplicationContextAware`, `ResourceLoaderAware` 등 관련 aware processor
  * 기본 후처리기 등록 (e.g., `ApplicationContextAwareProcessor`)

### 🛠 2.4 `postProcessBeanFactory()`

* `@Configuration` 클래스를 통해 설정한 사용자 정의 작업이 여기에 개입 가능
* 보통 `AbstractApplicationContext`를 상속하여 오버라이드할 때 사용됨

### 🧠 2.5 `invokeBeanFactoryPostProcessors()`

* **BeanFactoryPostProcessor**와 **ConfigurationClassPostProcessor** 호출
* `@Configuration`, `@ComponentScan`, `@Bean`, `@Import` 등을 해석
* `BeanDefinition`을 동적으로 추가할 수 있는 핵심 지점

### 🔌 2.6 `registerBeanPostProcessors()`

* `BeanPostProcessor`를 등록 (AOP, @Autowired, @Transactional 등 모두 이 시점에 적용)
* 주요 PostProcessor:

  * `AutowiredAnnotationBeanPostProcessor`
  * `CommonAnnotationBeanPostProcessor`
  * `AnnotationAwareAspectJAutoProxyCreator`

### 🈶 2.7 `initMessageSource()`

* 메시지 국제화(i18n) 처리를 위한 `MessageSource` 설정

### 📢 2.8 `initApplicationEventMulticaster()`

* Application 이벤트 전달을 위한 `ApplicationEventMulticaster` 등록

### 💡 2.9 `onRefresh()`

* 템플릿 메서드: 하위 컨텍스트(WebApplicationContext 등)에서 재정의 가능
* 예: 내장 톰캣, 서버 소켓, DB 커넥션 풀 등의 초기화 지점

### 📣 2.10 `registerListeners()`

* ApplicationListener를 등록
* `@EventListener`, `ApplicationListener`가 여기에 포함됨

### 🌱 2.11 `finishBeanFactoryInitialization()`

* **모든 non-lazy singleton 빈 인스턴스 생성**
* 순환 참조 감지
* 의존성 주입, 초기화 메서드 호출
* `@PostConstruct`, `InitializingBean` 등 적용

### ✅ 2.12 `finishRefresh()`

* `LifecycleProcessor#onRefresh()` 호출
* ApplicationEvent: `ContextRefreshedEvent` 발행
* JVM Hook 또는 SmartLifecycle Bean 시작

---

## 🧬 3. ApplicationContext의 확장성

Spring의 ApplicationContext는 매우 유연하며 다음과 같은 확장 지점을 제공합니다.

| 확장 지점                                         | 설명                         |
| --------------------------------------------- | -------------------------- |
| `postProcessBeanFactory()`                    | Bean 정의 조작 가능              |
| `BeanFactoryPostProcessor`                    | BeanDefinition을 동적으로 수정 가능 |
| `BeanPostProcessor`                           | Bean 인스턴스에 대해 전/후 처리 가능    |
| `ApplicationListener`                         | Spring 이벤트 처리 가능           |
| `EnvironmentAware`, `ApplicationContextAware` | 컨텍스트와 환경에 직접 접근 가능         |
| `SmartInitializingSingleton`                  | 모든 Bean 초기화 이후 후처리         |
| `SmartLifecycle`                              | 컨텍스트 시작/종료 훅 구현 가능         |

---

## 🧠 실전 예시: 커스텀 BeanFactoryPostProcessor

```java
@Component
public class MyBeanFactoryPostProcessor implements BeanFactoryPostProcessor {
  @Override
  public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {
    BeanDefinition bd = beanFactory.getBeanDefinition("myService");
    bd.setScope(BeanDefinition.SCOPE_PROTOTYPE);
  }
}
```

➡ `myService` 빈을 싱글톤이 아닌 프로토타입으로 바꿈

---

## ✅ 마무리 요약

| 항목     | 설명                                                  |
| ------ | --------------------------------------------------- |
| 핵심 메서드 | `refresh()`                                         |
| 책임     | 컨텍스트 초기화, Bean 등록 및 초기화, 이벤트 브로드캐스팅                 |
| 중요 순서  | BeanDefinition 등록 → PostProcessor 등록 → Bean 인스턴스 생성 |
| 확장성 지점 | PostProcessor, Listener, Lifecycle, Aware 인터페이스 등   |

